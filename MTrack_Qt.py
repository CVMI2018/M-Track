#  MTrack_Qt.py
#  This software is designed to capture the location of mice and their feet from video for data analysis.

#  First version Created by Sheldon Reeves on 6/24/15.
#  Using Python 3,opencv3, and Pyqt5
#  Email: sheldonreeves316@gmail.com

# Latest version Created By Lin Zhang since 06/10/2016
#  Language: Python 2.7
#  OpenCV Version: 3.0.0
#  PyQt Version 4.8


#  Required Files in same directory:
#       - MTrack.py
#       - DisplayLabel.py
#       - RoiLabel.py
#       - ColorLabel.py
#       - InfoDialog.py

import sys
import cv2
import time
import math
import os
import numpy as np
from PyQt4 import QtCore, QtGui
from PyQt4.QtCore import QTimer
from PyQt4.QtGui import QFileDialog, QLabel

#   Project imports:
#   Project imports:
from MTrack import MTrack
from DisplayLabel import DisplayLabel
from RoiLabel import RoiLabel
from InfoDialog import InfoDialog
from ColorLabel import ColorLabel
from drawMatches import drawMatches

#   Class mTrack_Qt:
#       Purpose: mTrack GUI Definition
#       Created by Sheldon Reeves on 6/24/15.
#       Language: Python 2.7
#
#       Dictionary of non-Qt Variables:
#           - cage_vertices: Storage buffer for cage vertices
#           - cage_wall_vertices: Storage buffer for cage wall vertices
#           - dialog: Instance of InfoDialog class
#           - displayLabel: Instance of DisplayLabel class
#           - frame_count: Counter for number of frames read/displayed
#           - left_foot_roi_buffer: Storage buffer for left foot ROI vertices
#           - left_foot_roi_hist_buffer: Storage buffer for left foot ROI histograms
#           - left_foot_roi_window_buffer: Storage buffer for left foot tracking windows
#           - mouse_count: The number of mice being tracked
#           - parent_img: The original version of the current frame
#           - right_foot_roi_buffer: Storage buffer for right foot ROI vertices
#           - right_foot_roi_hist_buffer: Storage buffer for right foot ROI histograms
#           - right_foot_roi_window_buffer: Storage buffer for right foot tracking windows
#           - roiLabel: Instance of the RoiLabel class
#           - saveDirectory: string of path to save location
#           - saveFile: reference to save file
#           - timer: Execution loop timer
#           - viewMode: string of current view mode setting
#           - zoom: zoom value
#           - Tracker: Instance of MTrack class

class MTrack_Qt(object):
    # Inline Private Member Method: __init_
    # Method that generates the GUI, defines events, and initializes variables
    # Precondition: GUI not created, event bindings not defined
    # Postcondition: GUI created and event bindings defined

    def __init__(self, QtMouseTracker):

        # Generated by pyuic5:
        QtMouseTracker.setObjectName("QtMouseTracker")
        #QtMouseTracker.resize(1200, 699)

        QtMouseTracker.setGeometry(3,30,800,800)
        QtMouseTracker.setFixedSize(900,800)
        #QtMouseTracker.resize(QtMouseTracker.sizeHint())


        QtMouseTracker.setWindowOpacity(1.0)
        QtMouseTracker.setAutoFillBackground(False)
        QtMouseTracker.setStyleSheet("")

        self.centralWidget = QtGui.QWidget(QtMouseTracker)
        self.centralWidget.setObjectName("centralWidget")
        self.gridLayout = QtGui.QGridLayout(self.centralWidget)
        self.gridLayout.setContentsMargins(11, 11, 11, 11)
        self.gridLayout.setSpacing(6)
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout = QtGui.QVBoxLayout()
        self.verticalLayout.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout.setSpacing(6)
        self.verticalLayout.setObjectName("verticalLayout")
        self.L_Hue_ScrollBar = QtGui.QScrollBar(self.centralWidget)
        self.L_Hue_ScrollBar.setEnabled(True)
        self.L_Hue_ScrollBar.setMinimum(0)
        self.L_Hue_ScrollBar.setMaximum(180)
        self.L_Hue_ScrollBar.setProperty("value", 0)
        self.L_Hue_ScrollBar.setOrientation(QtCore.Qt.Horizontal)
        self.L_Hue_ScrollBar.setObjectName("L_Hue_ScrollBar")
        self.verticalLayout.addWidget(self.L_Hue_ScrollBar)
        self.L_Sat_ScrollBar = QtGui.QScrollBar(self.centralWidget)
        self.L_Sat_ScrollBar.setMinimum(0)
        self.L_Sat_ScrollBar.setMaximum(255)
        self.L_Sat_ScrollBar.setProperty("value", 0)
        self.L_Sat_ScrollBar.setOrientation(QtCore.Qt.Horizontal)
        self.L_Sat_ScrollBar.setObjectName("L_Sat_ScrollBar")
        self.verticalLayout.addWidget(self.L_Sat_ScrollBar)
        self.L_Val_ScrollBar = QtGui.QScrollBar(self.centralWidget)
        self.L_Val_ScrollBar.setMinimum(0)
        self.L_Val_ScrollBar.setMaximum(255)
        self.L_Val_ScrollBar.setProperty("value", 0)
        self.L_Val_ScrollBar.setOrientation(QtCore.Qt.Horizontal)
        self.L_Val_ScrollBar.setObjectName("L_Val_ScrollBar")
        self.verticalLayout.addWidget(self.L_Val_ScrollBar)
        self.U_Hue_ScrollBar = QtGui.QScrollBar(self.centralWidget)
        self.U_Hue_ScrollBar.setMinimum(0)
        self.U_Hue_ScrollBar.setMaximum(180)
        self.U_Hue_ScrollBar.setProperty("value", 0)
        self.U_Hue_ScrollBar.setOrientation(QtCore.Qt.Horizontal)
        self.U_Hue_ScrollBar.setObjectName("U_Hue_ScrollBar")
        self.verticalLayout.addWidget(self.U_Hue_ScrollBar)
        self.U_Sat_ScrollBar = QtGui.QScrollBar(self.centralWidget)
        self.U_Sat_ScrollBar.setMinimum(0)
        self.U_Sat_ScrollBar.setMaximum(255)
        self.U_Sat_ScrollBar.setProperty("value", 0)
        self.U_Sat_ScrollBar.setOrientation(QtCore.Qt.Horizontal)
        self.U_Sat_ScrollBar.setObjectName("U_Sat_ScrollBar")
        self.verticalLayout.addWidget(self.U_Sat_ScrollBar)
        self.U_Val_ScrollBar = QtGui.QScrollBar(self.centralWidget)
        self.U_Val_ScrollBar.setMinimum(0)
        self.U_Val_ScrollBar.setMaximum(255)
        self.U_Val_ScrollBar.setProperty("value", 0)
        self.U_Val_ScrollBar.setOrientation(QtCore.Qt.Horizontal)
        self.U_Val_ScrollBar.setObjectName("U_Val_ScrollBar")
        self.verticalLayout.addWidget(self.U_Val_ScrollBar)
        self.Dilation_ScrollBar = QtGui.QScrollBar(self.centralWidget)
        self.Dilation_ScrollBar.setMinimum(1)
        self.Dilation_ScrollBar.setMaximum(15)
        self.Dilation_ScrollBar.setOrientation(QtCore.Qt.Horizontal)
        self.Dilation_ScrollBar.setObjectName("Dilation_ScrollBar")
        self.verticalLayout.addWidget(self.Dilation_ScrollBar)
        self.Box_Size_ScrollBar = QtGui.QScrollBar(self.centralWidget)
        self.Box_Size_ScrollBar.setMaximum(1000)
        self.Box_Size_ScrollBar.setOrientation(QtCore.Qt.Horizontal)
        self.Box_Size_ScrollBar.setObjectName("Box_Size_ScrollBar")
        self.verticalLayout.addWidget(self.Box_Size_ScrollBar)
        self.gridLayout.addLayout(self.verticalLayout, 7, 1, 1, 3)
        self.horizontalLayout_3 = QtGui.QHBoxLayout()
        self.horizontalLayout_3.setContentsMargins(11, 11, 11, 11)
        self.horizontalLayout_3.setSpacing(6)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.Load_pushButton = QtGui.QPushButton(self.centralWidget)
        self.Load_pushButton.setObjectName("Load_pushButton")
        self.horizontalLayout_3.addWidget(self.Load_pushButton)
        self.Save_pushButton = QtGui.QPushButton(self.centralWidget)
        self.Save_pushButton.setObjectName("Save_pushButton")
        self.horizontalLayout_3.addWidget(self.Save_pushButton)
        self.StartCam_pushButton = QtGui.QPushButton(self.centralWidget)
        self.StartCam_pushButton.setObjectName("StartCam_pushButton")
        self.horizontalLayout_3.addWidget(self.StartCam_pushButton)
        self.Exit_pushButton = QtGui.QPushButton(self.centralWidget)
        self.Exit_pushButton.setObjectName("Exit_pushButton")
        self.horizontalLayout_3.addWidget(self.Exit_pushButton)
        self.gridLayout.addLayout(self.horizontalLayout_3, 0, 0, 1, 5)
        self.verticalLayout_3 = QtGui.QVBoxLayout()
        self.verticalLayout_3.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout_3.setSpacing(6)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label = QtGui.QLabel(self.centralWidget)
        self.label.setObjectName("label")
        self.verticalLayout_3.addWidget(self.label)
        self.label_2 = QtGui.QLabel(self.centralWidget)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_3.addWidget(self.label_2)
        self.label_3 = QtGui.QLabel(self.centralWidget)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_3.addWidget(self.label_3)
        self.label_4 = QtGui.QLabel(self.centralWidget)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_3.addWidget(self.label_4)
        self.label_5 = QtGui.QLabel(self.centralWidget)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_3.addWidget(self.label_5)
        self.label_6 = QtGui.QLabel(self.centralWidget)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_3.addWidget(self.label_6)
        self.label_7 = QtGui.QLabel(self.centralWidget)
        self.label_7.setObjectName("label_7")
        self.verticalLayout_3.addWidget(self.label_7)
        self.label_8 = QtGui.QLabel(self.centralWidget)
        self.label_8.setObjectName("label_8")
        self.verticalLayout_3.addWidget(self.label_8)
        self.gridLayout.addLayout(self.verticalLayout_3, 7, 0, 1, 1)
        self.NoiseReduction_checkBox = QtGui.QCheckBox(self.centralWidget)
        self.NoiseReduction_checkBox.setObjectName("NoiseReduction_checkBox")
        self.gridLayout.addWidget(self.NoiseReduction_checkBox, 8, 2, 1, 2)
        self.line_2 = QtGui.QFrame(self.centralWidget)
        self.line_2.setFrameShape(QtGui.QFrame.HLine)
        self.line_2.setFrameShadow(QtGui.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.gridLayout.addWidget(self.line_2, 3, 0, 1, 5)
        self.Zoom_ScrollBar = QtGui.QScrollBar(self.centralWidget)
        self.Zoom_ScrollBar.setEnabled(True)
        self.Zoom_ScrollBar.setMinimum(0)
        self.Zoom_ScrollBar.setMaximum(20)
        self.Zoom_ScrollBar.setSingleStep(1)
        self.Zoom_ScrollBar.setProperty("value", 10)
        self.Zoom_ScrollBar.setOrientation(QtCore.Qt.Horizontal)
        self.Zoom_ScrollBar.setObjectName("Zoom_ScrollBar")
        self.gridLayout.addWidget(self.Zoom_ScrollBar, 12, 1, 1, 3)
        self.horizontalLayout_4 = QtGui.QHBoxLayout()
        self.horizontalLayout_4.setContentsMargins(11, 11, 11, 11)
        self.horizontalLayout_4.setSpacing(6)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_11 = QtGui.QLabel(self.centralWidget)
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_4.addWidget(self.label_11)
        self.View_Mode_comboBox = QtGui.QComboBox(self.centralWidget)
        self.View_Mode_comboBox.setObjectName("View_Mode_comboBox")
        self.View_Mode_comboBox.addItem("")
        self.View_Mode_comboBox.addItem("")
        self.View_Mode_comboBox.addItem("")
        self.View_Mode_comboBox.addItem("")
        self.View_Mode_comboBox.addItem("")
        self.horizontalLayout_4.addWidget(self.View_Mode_comboBox)
        self.gridLayout.addLayout(self.horizontalLayout_4, 6, 0, 1, 5)
        self.gridLayout_2 = QtGui.QGridLayout()
        self.gridLayout_2.setContentsMargins(11, 11, 11, 11)
        self.gridLayout_2.setSpacing(6)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.Draw_LF_Roi_pushButton = QtGui.QPushButton(self.centralWidget)
        self.Draw_LF_Roi_pushButton.setObjectName("Draw_LF_Roi_pushButton")
        self.gridLayout_2.addWidget(self.Draw_LF_Roi_pushButton, 0, 1, 1, 1)
        self.Detect_Mice_pushButton = QtGui.QPushButton(self.centralWidget)
        self.Detect_Mice_pushButton.setObjectName("Detect_Mice_pushButton")
        self.gridLayout_2.addWidget(self.Detect_Mice_pushButton, 1, 0, 1, 1)
        self.DrawCage_pushButton = QtGui.QPushButton(self.centralWidget)
        self.DrawCage_pushButton.setObjectName("DrawCage_pushButton")
        self.gridLayout_2.addWidget(self.DrawCage_pushButton, 0, 0, 1, 1)
        self.Detect_RF_pushButton = QtGui.QPushButton(self.centralWidget)
        self.Detect_RF_pushButton.setObjectName("Detect_RF_pushButton")
        self.gridLayout_2.addWidget(self.Detect_RF_pushButton, 1, 2, 1, 1)
        self.Detect_LF_pushButton = QtGui.QPushButton(self.centralWidget)
        self.Detect_LF_pushButton.setObjectName("Detect_LF_pushButton")
        self.gridLayout_2.addWidget(self.Detect_LF_pushButton, 1, 1, 1, 1)
        self.Draw_RF_Roi_pushButton = QtGui.QPushButton(self.centralWidget)
        self.Draw_RF_Roi_pushButton.setObjectName("Draw_RF_Roi_pushButton")
        self.gridLayout_2.addWidget(self.Draw_RF_Roi_pushButton, 0, 2, 1, 1)
        self.gridLayout.addLayout(self.gridLayout_2, 2, 0, 1, 5)

        self.Selector_scrollArea = QtGui.QScrollArea(self.centralWidget)
        self.Selector_scrollArea.setMaximumSize(QtCore.QSize(301, 50))

        #self.Selector_scrollArea.ScrollBarPolicy(QtGui.QAbstractScrollArea.AdjustIgnored)

        self.Selector_scrollArea.setWidgetResizable(True)
        self.Selector_scrollArea.setObjectName("Selector_scrollArea")
        self.scrollAreaWidgetContents_4 = QtGui.QWidget()
        self.scrollAreaWidgetContents_4.setGeometry(QtCore.QRect(0, 0, 299, 48))
        self.scrollAreaWidgetContents_4.setObjectName("scrollAreaWidgetContents_4")
        self.Selector_scrollArea.setWidget(self.scrollAreaWidgetContents_4)
        self.gridLayout.addWidget(self.Selector_scrollArea, 9, 0, 1, 5)
        self.deNoise_Val_spinBox = QtGui.QSpinBox(self.centralWidget)
        self.deNoise_Val_spinBox.setMinimum(1)
        self.deNoise_Val_spinBox.setMaximum(100)
        self.deNoise_Val_spinBox.setObjectName("deNoise_Val_spinBox")


        self.gridLayout.addWidget(self.deNoise_Val_spinBox, 11, 4, 1, 1)
        self.Stop_pushButton = QtGui.QPushButton(self.centralWidget)
        self.Stop_pushButton.setObjectName("Stop_pushButton")
        self.gridLayout.addWidget(self.Stop_pushButton, 4, 4, 1, 1)
        self.line_4 = QtGui.QFrame(self.centralWidget)
        self.line_4.setFrameShape(QtGui.QFrame.HLine)
        self.line_4.setFrameShadow(QtGui.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.gridLayout.addWidget(self.line_4, 5, 0, 1, 5)
        self.verticalLayout_2 = QtGui.QVBoxLayout()
        self.verticalLayout_2.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout_2.setSpacing(6)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.L_Hue_spinBox = QtGui.QSpinBox(self.centralWidget)
        self.L_Hue_spinBox.setMouseTracking(True)
        self.L_Hue_spinBox.setMinimum(0)
        self.L_Hue_spinBox.setMaximum(180)
        self.L_Hue_spinBox.setProperty("value", 0)
        self.L_Hue_spinBox.setObjectName("L_Hue_spinBox")
        self.verticalLayout_2.addWidget(self.L_Hue_spinBox)
        self.L_Sat_spinBox = QtGui.QSpinBox(self.centralWidget)
        self.L_Sat_spinBox.setMouseTracking(True)
        self.L_Sat_spinBox.setMinimum(0)
        self.L_Sat_spinBox.setMaximum(255)
        self.L_Sat_spinBox.setProperty("value", 0)
        self.L_Sat_spinBox.setObjectName("L_Sat_spinBox")
        self.verticalLayout_2.addWidget(self.L_Sat_spinBox)
        self.L_Val_spinBox = QtGui.QSpinBox(self.centralWidget)
        self.L_Val_spinBox.setMouseTracking(True)
        self.L_Val_spinBox.setMinimum(0)
        self.L_Val_spinBox.setMaximum(255)
        self.L_Val_spinBox.setProperty("value", 0)
        self.L_Val_spinBox.setObjectName("L_Val_spinBox")
        self.verticalLayout_2.addWidget(self.L_Val_spinBox)
        self.U_Hue_spinBox = QtGui.QSpinBox(self.centralWidget)
        self.U_Hue_spinBox.setMouseTracking(True)
        self.U_Hue_spinBox.setMinimum(0)
        self.U_Hue_spinBox.setMaximum(200)
        self.U_Hue_spinBox.setProperty("value", 0)
        self.U_Hue_spinBox.setObjectName("U_Hue_spinBox")
        self.verticalLayout_2.addWidget(self.U_Hue_spinBox)
        self.U_Sat_spinBox = QtGui.QSpinBox(self.centralWidget)
        self.U_Sat_spinBox.setMouseTracking(True)
        self.U_Sat_spinBox.setMinimum(0)
        self.U_Sat_spinBox.setMaximum(255)
        self.U_Sat_spinBox.setProperty("value", 0)
        self.U_Sat_spinBox.setObjectName("U_Sat_spinBox")
        self.verticalLayout_2.addWidget(self.U_Sat_spinBox)
        self.U_Val_spinBox = QtGui.QSpinBox(self.centralWidget)
        self.U_Val_spinBox.setMouseTracking(True)
        self.U_Val_spinBox.setMinimum(0)
        self.U_Val_spinBox.setMaximum(255)
        self.U_Val_spinBox.setProperty("value", 0)
        self.U_Val_spinBox.setObjectName("U_Val_spinBox")
        self.verticalLayout_2.addWidget(self.U_Val_spinBox)
        self.Dilation_spinBox = QtGui.QSpinBox(self.centralWidget)
        self.Dilation_spinBox.setMouseTracking(True)
        self.Dilation_spinBox.setMinimum(1)
        self.Dilation_spinBox.setMaximum(15)
        self.Dilation_spinBox.setObjectName("Dilation_spinBox")
        self.verticalLayout_2.addWidget(self.Dilation_spinBox)
        self.Box_Size_spinBox = QtGui.QSpinBox(self.centralWidget)
        self.Box_Size_spinBox.setMouseTracking(True)
        self.Box_Size_spinBox.setMinimum(0)
        self.Box_Size_spinBox.setMaximum(1000)
        self.Box_Size_spinBox.setProperty("value", 0)
        self.Box_Size_spinBox.setObjectName("Box_Size_spinBox")
        self.verticalLayout_2.addWidget(self.Box_Size_spinBox)
        self.gridLayout.addLayout(self.verticalLayout_2, 7, 4, 1, 1)
        self.Display_scrollArea = QtGui.QScrollArea(self.centralWidget)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Display_scrollArea.sizePolicy().hasHeightForWidth())
        self.Display_scrollArea.setSizePolicy(sizePolicy)
        self.Display_scrollArea.setAutoFillBackground(True)
        self.Display_scrollArea.setFrameShadow(QtGui.QFrame.Sunken)

        #self.Display_scrollArea.setSizeAdjustPolicy(QtGui.QAbstractScrollArea.AdjustIgnored)

        self.Display_scrollArea.setWidgetResizable(True)
        self.Display_scrollArea.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)

        self.Display_scrollArea.setObjectName("Display_scrollArea")

        self.scrollAreaWidgetContents = QtGui.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 458, 673))


        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.Display_scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.gridLayout.addWidget(self.Display_scrollArea, 0, 5, 14, 1)
        self.deNoise_Val_ScrollBar = QtGui.QScrollBar(self.centralWidget)
        self.deNoise_Val_ScrollBar.setMinimum(1)
        self.deNoise_Val_ScrollBar.setMaximum(100)
        self.deNoise_Val_ScrollBar.setOrientation(QtCore.Qt.Horizontal)
        self.deNoise_Val_ScrollBar.setObjectName("deNoise_Val_ScrollBar")
        self.gridLayout.addWidget(self.deNoise_Val_ScrollBar, 11, 1, 1, 3)
        self.label_12 = QtGui.QLabel(self.centralWidget)
        self.label_12.setObjectName("label_12")
        self.gridLayout.addWidget(self.label_12, 12, 0, 1, 1)
        self.label_9 = QtGui.QLabel(self.centralWidget)
        self.label_9.setObjectName("label_9")
        self.gridLayout.addWidget(self.label_9, 11, 0, 1, 1)
        self.line_3 = QtGui.QFrame(self.centralWidget)
        self.line_3.setFrameShape(QtGui.QFrame.HLine)
        self.line_3.setFrameShadow(QtGui.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.gridLayout.addWidget(self.line_3, 10, 0, 1, 5)
        self.line = QtGui.QFrame(self.centralWidget)
        self.line.setFrameShape(QtGui.QFrame.HLine)
        self.line.setFrameShadow(QtGui.QFrame.Sunken)
        self.line.setObjectName("line")
        self.gridLayout.addWidget(self.line, 1, 0, 1, 5)
        self.Collision_checkBox = QtGui.QCheckBox(self.centralWidget)
        self.Collision_checkBox.setObjectName("Collision_checkBox")
        self.gridLayout.addWidget(self.Collision_checkBox, 8, 0, 1, 2)
        self.Execute_pushButton = QtGui.QPushButton(self.centralWidget)
        self.Execute_pushButton.setObjectName("Execute_pushButton")
        self.gridLayout.addWidget(self.Execute_pushButton, 4, 2, 1, 2)
        self.horizontalLayout_2 = QtGui.QHBoxLayout()
        self.horizontalLayout_2.setContentsMargins(11, 11, 11, 11)
        self.horizontalLayout_2.setSpacing(6)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_10 = QtGui.QLabel(self.centralWidget)
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_2.addWidget(self.label_10)
        self.mouse_num_selector = QtGui.QComboBox(self.centralWidget)
        self.mouse_num_selector.setObjectName("mouse_num_selector")
        self.mouse_num_selector.addItem("")
        self.mouse_num_selector.addItem("")
        self.mouse_num_selector.addItem("")
        self.mouse_num_selector.addItem("")
        self.horizontalLayout_2.addWidget(self.mouse_num_selector)
        self.gridLayout.addLayout(self.horizontalLayout_2, 4, 0, 1, 2)
        self.Collision_checkBox.raise_()
        self.NoiseReduction_checkBox.raise_()
        self.label_9.raise_()
        self.deNoise_Val_ScrollBar.raise_()
        self.deNoise_Val_spinBox.raise_()
        self.Display_scrollArea.raise_()
        self.Selector_scrollArea.raise_()
        self.Zoom_ScrollBar.raise_()
        self.label_12.raise_()
        self.line.raise_()
        self.line_2.raise_()
        self.line_3.raise_()
        self.line_4.raise_()
        self.Execute_pushButton.raise_()
        self.Stop_pushButton.raise_()
        QtMouseTracker.setCentralWidget(self.centralWidget)

        self.retranslateUi(QtMouseTracker)
        self.L_Hue_spinBox.valueChanged['int'].connect(self.L_Hue_ScrollBar.setValue)
        self.L_Sat_spinBox.valueChanged['int'].connect(self.L_Sat_ScrollBar.setValue)
        self.L_Val_spinBox.valueChanged['int'].connect(self.L_Val_ScrollBar.setValue)
        self.U_Hue_spinBox.valueChanged['int'].connect(self.U_Hue_ScrollBar.setValue)
        self.U_Sat_spinBox.valueChanged['int'].connect(self.U_Sat_ScrollBar.setValue)
        self.U_Val_spinBox.valueChanged['int'].connect(self.U_Val_ScrollBar.setValue)
        self.Dilation_spinBox.valueChanged['int'].connect(self.Dilation_ScrollBar.setValue)
        self.Box_Size_spinBox.valueChanged['int'].connect(self.Box_Size_ScrollBar.setValue)
        self.Box_Size_ScrollBar.sliderMoved['int'].connect(self.Box_Size_spinBox.setValue)
        self.Dilation_ScrollBar.sliderMoved['int'].connect(self.Dilation_spinBox.setValue)
        self.L_Hue_ScrollBar.sliderMoved['int'].connect(self.L_Hue_spinBox.setValue)
        self.L_Sat_ScrollBar.sliderMoved['int'].connect(self.L_Sat_spinBox.setValue)
        self.L_Val_ScrollBar.sliderMoved['int'].connect(self.L_Val_spinBox.setValue)
        self.U_Hue_ScrollBar.sliderMoved['int'].connect(self.U_Hue_spinBox.setValue)
        self.U_Sat_ScrollBar.sliderMoved['int'].connect(self.U_Sat_spinBox.setValue)
        self.U_Val_ScrollBar.sliderMoved['int'].connect(self.U_Val_spinBox.setValue)
        self.L_Hue_ScrollBar.valueChanged['int'].connect(self.L_Hue_spinBox.setValue)
        self.L_Sat_ScrollBar.valueChanged['int'].connect(self.L_Sat_spinBox.setValue)
        self.L_Val_ScrollBar.valueChanged['int'].connect(self.L_Val_spinBox.setValue)
        self.U_Hue_ScrollBar.valueChanged['int'].connect(self.U_Hue_spinBox.setValue)
        self.U_Sat_ScrollBar.valueChanged['int'].connect(self.U_Sat_spinBox.setValue)
        self.U_Val_ScrollBar.valueChanged['int'].connect(self.U_Val_spinBox.setValue)
        self.Dilation_ScrollBar.valueChanged['int'].connect(self.Dilation_spinBox.setValue)
        self.Box_Size_ScrollBar.valueChanged['int'].connect(self.Box_Size_spinBox.setValue)
        self.deNoise_Val_ScrollBar.valueChanged['int'].connect(self.deNoise_Val_spinBox.setValue)
        self.deNoise_Val_spinBox.valueChanged['int'].connect(self.deNoise_Val_ScrollBar.setValue)
        self.deNoise_Val_ScrollBar.sliderMoved['int'].connect(self.deNoise_Val_spinBox.setValue)
        QtCore.QMetaObject.connectSlotsByName(QtMouseTracker)
        # End pyuic5 generated code

        # --------Event Bindings---------
        #   Buttons
        self.Load_pushButton.clicked.connect(self.buttonAction_loadVideo)
        self.Save_pushButton.clicked.connect(self.buttonAction_savePath)


        self.StartCam_pushButton.clicked.connect(self.buttonAction_startCam)
        self.DrawCage_pushButton.clicked.connect(self.buttonAction_drawCage)
        self.Detect_Mice_pushButton.clicked.connect(self.buttonAction_detectMice)
        self.Detect_LF_pushButton.clicked.connect(self.buttonAction_detectLeftFeet)
        self.Detect_RF_pushButton.clicked.connect(self.buttonAction_detectRightFeet)
        self.Draw_LF_Roi_pushButton.clicked.connect(self.buttonAction_draw_LF_roi)
        self.Draw_RF_Roi_pushButton.clicked.connect(self.buttonAction_draw_RF_roi)
        self.Execute_pushButton.clicked.connect(self.buttonAction_execute)
        self.Exit_pushButton.clicked.connect(self.buttonAction_exit)
        self.Stop_pushButton.clicked.connect(self.buttonAction_stop)

        #   Check Boxes
        self.Collision_checkBox.stateChanged.connect(self.checkboxAction_collisionDetect)
        self.NoiseReduction_checkBox.stateChanged.connect(self.checkboxAction_NoiseReduction)

        #   Selectors
        self.mouse_num_selector.currentIndexChanged.connect(self.selectorUpdate_mouseNum)
        self.View_Mode_comboBox.currentIndexChanged.connect(self.selectorUpdate_viewMode)

        #   ScrollBars
        self.Zoom_ScrollBar.sliderMoved.connect(self.sliderUpdate_Zoom)
        self.L_Hue_ScrollBar.sliderMoved.connect(self.sliderUpdate_LHue)
        self.L_Sat_ScrollBar.sliderMoved.connect(self.sliderUpdate_LSat)
        self.L_Val_ScrollBar.sliderMoved.connect(self.sliderUpdate_LVal)
        self.U_Hue_ScrollBar.sliderMoved.connect(self.sliderUpdate_UHue)
        self.U_Sat_ScrollBar.sliderMoved.connect(self.sliderUpdate_USat)
        self.U_Val_ScrollBar.sliderMoved.connect(self.sliderUpdate_UVal)
        self.Dilation_ScrollBar.sliderMoved.connect(self.sliderUpdate_Dilation)
        self.Box_Size_ScrollBar.sliderMoved.connect(self.sliderUpdate_boxSize)
        self.deNoise_Val_ScrollBar.sliderMoved.connect(self.sliderUpdate_deNoiseVal)

        self.Zoom_ScrollBar.valueChanged.connect(self.sliderUpdate_Zoom)
        self.L_Hue_ScrollBar.valueChanged.connect(self.sliderUpdate_LHue)
        self.L_Sat_ScrollBar.valueChanged.connect(self.sliderUpdate_LSat)
        self.L_Val_ScrollBar.valueChanged.connect(self.sliderUpdate_LVal)
        self.U_Hue_ScrollBar.valueChanged.connect(self.sliderUpdate_UHue)
        self.U_Sat_ScrollBar.valueChanged.connect(self.sliderUpdate_USat)
        self.U_Val_ScrollBar.valueChanged.connect(self.sliderUpdate_UVal)
        self.Dilation_ScrollBar.valueChanged.connect(self.sliderUpdate_Dilation)
        self.Box_Size_ScrollBar.valueChanged.connect(self.sliderUpdate_boxSize)
        self.deNoise_Val_ScrollBar.valueChanged.connect(self.sliderUpdate_deNoiseVal)

        # ---------------------------------

        # Class Initialization
        self.dialog = InfoDialog()
        self.colorLabel = ColorLabel()
        self.colorLabel.setGeometry(QtCore.QRect(0, 0, 831, 821))
        self.colorLabel.setText("")
        self.colorLabel.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        self.colorLabel.setObjectName("colorLabel")
        self.Selector_scrollArea.setWidget(self.colorLabel)

        # Variable Initialization
        self.frame_count = 0
        self.cage_vertices = []
        self.cage_wall_vertices = []
        self.left_foot_roi_hist_buffer = []
        self.left_foot_roi_window_buffer = []
        self.right_foot_roi_hist_buffer = []
        self.right_foot_roi_window_buffer = []
        self.parent_img = []
        self.selectorUpdate_mouseNum()
        self.sliderUpdate_Zoom()
        self.selectorUpdate_viewMode()
        self.saveDirectory = ""

        # Disable Buttons
        self.DrawCage_pushButton.setEnabled(False)
        self.Detect_Mice_pushButton.setEnabled(False)
        self.Detect_LF_pushButton.setEnabled(False)
        self.Detect_RF_pushButton.setEnabled(False)
        self.Draw_LF_Roi_pushButton.setEnabled(False)
        self.Draw_RF_Roi_pushButton.setEnabled(False)
        self.Execute_pushButton.setEnabled(False)
        self.Stop_pushButton.setEnabled(False)

        self.DrawCage_pushButton.setDisabled(True)
        self.Detect_Mice_pushButton.setDisabled(True)
        self.Detect_LF_pushButton.setDisabled(True)
        self.Detect_RF_pushButton.setDisabled(True)
        self.Draw_LF_Roi_pushButton.setDisabled(True)
        self.Draw_RF_Roi_pushButton.setDisabled(True)
        self.Execute_pushButton.setDisabled(True)
        self.Stop_pushButton.setDisabled(True)


        #
        # layout = QtGui.QVBoxLayout(self)
        # layout.add(QtMouseTracker)

    # Generated by pyuic5:
    def retranslateUi(self, QtMouseTracker):
        _translate = QtCore.QCoreApplication.translate
        QtMouseTracker.setWindowTitle(_translate("QtMouseTracker", "QtMouseTracker"))
        self.Load_pushButton.setText(_translate("QtMouseTracker", "Load Video"))
        self.Save_pushButton.setText(_translate("QtMouseTracker", "Save Path"))
        self.StartCam_pushButton.setText(_translate("QtMouseTracker", "Start CAM"))
        self.Exit_pushButton.setText(_translate("QtMouseTracker", "Exit"))
        self.label.setText(_translate("QtMouseTracker", "L Hue"))
        self.label_2.setText(_translate("QtMouseTracker", "L Sat"))
        self.label_3.setText(_translate("QtMouseTracker", "L Val"))
        self.label_4.setText(_translate("QtMouseTracker", "U Hue"))
        self.label_5.setText(_translate("QtMouseTracker", "U Sat"))
        self.label_6.setText(_translate("QtMouseTracker", "U Val"))
        self.label_7.setText(_translate("QtMouseTracker", "Dilation"))
        self.label_8.setText(_translate("QtMouseTracker", "Min Box Size"))
        self.NoiseReduction_checkBox.setText(_translate("QtMouseTracker", "Noise Reduction"))
        self.label_11.setText(_translate("QtMouseTracker", "Viewing Mode:"))
        self.View_Mode_comboBox.setItemText(0, _translate("QtMouseTracker", "Original"))
        self.View_Mode_comboBox.setItemText(1, _translate("QtMouseTracker", "HSV"))
        self.View_Mode_comboBox.setItemText(2, _translate("QtMouseTracker", "Body Color Mask"))
        self.View_Mode_comboBox.setItemText(3, _translate("QtMouseTracker", "Left Foot Color Mask"))
        self.View_Mode_comboBox.setItemText(4, _translate("QtMouseTracker", "Right Foot Color Mask"))
        self.Draw_LF_Roi_pushButton.setText(_translate("QtMouseTracker", "Draw LF ROIs"))
        self.Detect_Mice_pushButton.setText(_translate("QtMouseTracker", "Detect Mice"))
        self.DrawCage_pushButton.setText(_translate("QtMouseTracker", "Draw Cage"))
        self.Detect_RF_pushButton.setText(_translate("QtMouseTracker", "Detect RF"))
        self.Detect_LF_pushButton.setText(_translate("QtMouseTracker", "Detect LF"))
        self.Draw_RF_Roi_pushButton.setText(_translate("QtMouseTracker", "Draw RF ROIs"))
        self.Stop_pushButton.setText(_translate("QtMouseTracker", "Pause"))
        self.label_12.setText(_translate("QtMouseTracker", "Zoom"))
        self.label_9.setText(_translate("QtMouseTracker", "Denoise Val"))
        self.Collision_checkBox.setText(_translate("QtMouseTracker", "Collision Detect"))
        self.Execute_pushButton.setText(_translate("QtMouseTracker", "Execute"))
        self.label_10.setText(_translate("QtMouseTracker", "# Mice:"))
        self.mouse_num_selector.setItemText(0, _translate("QtMouseTracker", "Select"))
        self.mouse_num_selector.setItemText(1, _translate("QtMouseTracker", "1"))
        self.mouse_num_selector.setItemText(2, _translate("QtMouseTracker", "2"))
        self.mouse_num_selector.setItemText(3, _translate("QtMouseTracker", "4"))

    def restart(self):
        # create a signal equivalent to "void someSignal(int, QWidget)"
        self.emit(QtCore.SIGNAL("RESTARTREQUIRED"), True)
        # End pyuic5 generated code


    def reloadList(info):
        # info is a list of strings
        listwidget.clear()
        listwidget.addItems(info)

    # Inline Member Method: buttonAction_loadVideo
    # Method that allows the user to select a video file
    # Precondition: Video file not selected
    # Postcondition: Video file selected, first frame displayed, Draw cage button enabled


    def buttonAction_loadVideo(self):

        fname = QFileDialog.getOpenFileName()
        #print 'fname: ', fname


        self.Tracker = MTrack(str(fname)) # add str is required

        # size of video
        # self.cap    = cv2.VideoCapture(str(fname))
        # self.height = self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
        # self.width  = self.cap.get(cv2.CAP_PROP_FRAME_WIDTH)


        # Enable DrawCage
        self.DrawCage_pushButton.setEnabled(True)
        self.DrawCage_pushButton.setDisabled(False)

        # Initialize displayLabel
        self.displayLabel = DisplayLabel(self.Tracker.first_frame, self.Tracker,
                                         self.zoom, QtInstance)


        self.img_height, self.img_width, channels = self.Tracker.first_frame.shape

        # print self.img_height
        # print self.img_width

        self.displayLabel.setGeometry(QtCore.QRect(0, 0, 831, 821))
        #self.displayLabel.setFixedSize(self.sizeHint())

        self.displayLabel.setText("")
        self.displayLabel.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        self.displayLabel.setObjectName("displayLabel")
        self.displayLabel.setMouseTracking(True)
        self.Display_scrollArea.setWidget(self.displayLabel)

        # Display first image

        self.displayLabel.display_image(self.Tracker.first_frame, False, self.zoom)

        # show HSV information

        hsvImage = cv2.cvtColor(self.Tracker.first_frame, cv2.COLOR_BGR2HSV)
        #print 'HHH',hsvImage
        #print hsvImage[1][1]
        cv2.putText(self.Tracker.first_frame, "HSV: {}".format(hsvImage[1][1]), (10, 20),
        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)

        self.parent_img = self.Tracker.first_frame
        #self.displayLabel.resize(self.img_height,self.img_width)

    # def sizeHint(self):
    #
    #     self.img_height, self.img_width, channels = self.Tracker.first_frame.shape
    #
    #     # print self.img_height
    #     # print self.img_width
    #     return QtCore.QSize(self.img_height, self.img_width+50)
    # Inline Member Method: buttonAction_savePath
    # Method that allows the user to select save directory
    # Precondition: Save Directory not selected
    # Postcondition: Save Directory Selected, column labels written to file
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7

    # Created by Lin Zhang on 6/30/16.
    # save file as multi-format
    # Language: Python 2.7
    def buttonAction_savePath(self):
        caption = 'save files'
        directory = QFileDialog.getExistingDirectory()
        filter_mask = "*.txt;; *.xml;;*.csv ;; *.html;; All Files (*)"
        filenames = QtGui.QFileDialog.getSaveFileName(None, caption, directory, filter_mask)
        #print filenames  # test
        if not filenames:
             return

        self.saveFile = open(filenames,'w')
        s = ("FrameNum MouseNum LeftX LeftY RightX RightY MouseAngle\n")
        self.saveFile.write(s)
        #self.saveFile.close()

    # def buttonAction_savePath(self):
    #     saveDirectory = QFileDialog.getExistingDirectory()
    #     self.saveFile = open(saveDirectory + "/Tracking Output " + time.strftime('%Y-%m-%d %H%M%S') + ".txt", 'w')
    #     s = ("FrameNum MouseNum LeftX LeftY RightX RightY MouseAngle\n")
    #     self.saveFile.write(s)
    #



    # Inline Member Method: buttonAction_startCam
    # Method that allows the user to select a video file
    # Precondition: Video file not selected
    # Postcondition: Camera started in place of video file, first frame displayed, draw cage enabled

    def buttonAction_startCam(self):
        self.Tracker = MTrack(0)

        # Enable DrawCage
        self.DrawCage_pushButton.setEnabled(True)
        self.DrawCage_pushButton.setDisabled(False)

        # Initialize displayLabel
        self.displayLabel = DisplayLabel(self.Tracker.first_frame, self.Tracker, self.zoom, QtInstance)
        self.displayLabel.setGeometry(QtCore.QRect(0, 0, 831, 821))
        self.displayLabel.setText("")
        self.displayLabel.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        self.displayLabel.setObjectName("displayLabel")
        self.displayLabel.setMouseTracking(True)
        self.Display_scrollArea.setWidget(self.displayLabel)

        # Display first image
        self.displayLabel.display_image(self.Tracker.first_frame, False, self.zoom)

        self.parent_img = self.Tracker.first_frame

    # Inline Member Method: buttonAction_drawCage
    # Method that allows the user to draw a box around the tracking region
    # Precondition: Tracking region undefined
    # Postcondition:
    #       -Tracking Region Defined
    #       -Cage walls defined(if any)
    #       -Cropped image displayed
    #       -Buttons Enabled
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def buttonAction_drawCage(self):
        # Clear ROI's
        self.left_foot_roi_buffer = []
        self.right_foot_roi_buffer = []

        # Disable Buttons
        self.Detect_Mice_pushButton.setEnabled(False)
        self.Detect_LF_pushButton.setEnabled(False)
        self.Detect_RF_pushButton.setEnabled(False)
        self.Draw_LF_Roi_pushButton.setEnabled(False)
        self.Draw_RF_Roi_pushButton.setEnabled(False)
        self.Execute_pushButton.setEnabled(False)

        self.Detect_Mice_pushButton.setDisabled(True)
        self.Detect_LF_pushButton.setDisabled(True)
        self.Detect_RF_pushButton.setDisabled(True)
        self.Draw_LF_Roi_pushButton.setDisabled(True)
        self.Draw_RF_Roi_pushButton.setDisabled(True)
        self.Execute_pushButton.setDisabled(True)

        if self.mouse_count == 'Select':
            self.dialog.infoDialog('Please Select The Number of Mice.')
            return

        self.View_Mode_comboBox.setCurrentIndex(0)

        self.displayLabel.drawSetup(self.mouse_count)

        # Disable mouse selector
        self.mouse_num_selector.setEnabled(False)
        self.mouse_num_selector.setDisabled(True)

        # Disable View Mode Selector
        self.View_Mode_comboBox.setEnabled(False)
        self.View_Mode_comboBox.setDisabled(True)

        # Enable Zoom
        self.Zoom_ScrollBar.setEnabled(True)
        self.Zoom_ScrollBar.setDisabled(False)

        self.dialog.infoDialog("Draw a box around the cage")

    # Inline Member Method: buttonAction_detectMice
    # Method to execute mouse detection on current frame only
    # Precondition: No mice detected
    # Postcondition:
    #       -Mice detected and boxes drawn
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def buttonAction_detectMice(self):
        img = self.parent_img.copy()
        img = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)

        # De-noise
        if self.Tracker.noiseReduction_on is True:
            img = cv2.fastNlMeansDenoisingColored(img, h=self.Tracker.deNoise_val)

        box_list, center_point_list = self.Tracker.detect_mice(img, int(self.mouse_count))

        img = cv2.cvtColor(img, cv2.COLOR_HSV2RGB)
        if self.viewMode != 'Original' and self.viewMode != 'HSV':
            mask = self.getColorMask(img)
            img = cv2.bitwise_and(img, img, mask=mask)

        # Draw Boxes
        self.Tracker.draw_boxes(box_list, (255, 0, 0), img)

        # Center Points
        self.Tracker.draw_center_points(center_point_list, (255, 0, 0), img)

        self.displayLabel.display_image(img, False, self.zoom)

    # Inline Member Method: buttonAction_detectLeftFeet
    # Method to execute left foot detection on current frame only
    # Precondition: No Left feet detected
    # Postcondition:
    #       -Left feet detected and boxes drawn
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def buttonAction_detectLeftFeet(self):
        img = self.parent_img.copy()
        img = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)

        # De-noise
        if self.Tracker.noiseReduction_on is True:
            img = cv2.fastNlMeansDenoisingColored(img, h=self.Tracker.deNoise_val)

        mouse_box_list, mouse_center_points = self.Tracker.detect_mice(img, int(self.mouse_count))
        left_foot_box_list, left_foot_center_points, crop_list = self.Tracker.detect_left_feet(img, int(
            self.mouse_count), mouse_box_list)

        img = cv2.cvtColor(img, cv2.COLOR_HSV2RGB)
        if self.viewMode != 'Original' and self.viewMode != 'HSV':
            mask = self.getColorMask(img)
            img = cv2.bitwise_and(img, img, mask=mask)

        for i in range(0, len(crop_list)):
            if self.viewMode != 'Original' and self.viewMode != 'HSV':
                crop_list[i] = cv2.cvtColor(crop_list[i], cv2.COLOR_HSV2RGB)
                mask = self.getColorMask(crop_list[i])
                crop_list[i] = cv2.bitwise_and(crop_list[i], crop_list[i], mask=mask)

            # Draw Left Foot Boxes
            self.Tracker.draw_boxes(left_foot_box_list[i], (0, 0, 255), crop_list[i])

            # Draw Left Foot Center Points
            self.Tracker.draw_center_points(left_foot_center_points[i], (0, 0, 255), crop_list[i])

        # Draw Mouse Boxes
        self.Tracker.draw_boxes(mouse_box_list, (255, 0, 0), img)

        # Draw Mouse Center Points
        self.Tracker.draw_center_points(mouse_center_points, (255, 0, 0), img)

        # Insert cropped images
        self.Tracker.insert_images(mouse_box_list, crop_list, img)

        self.displayLabel.display_image(img, False, self.zoom)

    # Inline Member Method: buttonAction_detectRightFeet
    # Method to execute right foot detection on current frame only
    # Precondition: No right feet detected
    # Postcondition:
    #       -Right feet detected and boxes drawn
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def buttonAction_detectRightFeet(self):
        img = self.parent_img.copy()
        img = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)

        # De-Noise
        if self.Tracker.noiseReduction_on is True:
            img = cv2.fastNlMeansDenoisingColored(img, h=self.Tracker.deNoise_val)

        mouse_box_list, mouse_center_points = self.Tracker.detect_mice(img, int(self.mouse_count))
        right_foot_box_list, right_foot_center_points, crop_list = self.Tracker.detect_right_feet(img, int(
            self.mouse_count), mouse_box_list)

        img = cv2.cvtColor(img, cv2.COLOR_HSV2RGB)
        if self.viewMode != 'Original' and self.viewMode != 'HSV':
            mask = self.getColorMask(img)
            img = cv2.bitwise_and(img, img, mask=mask)

        for i in range(0, len(crop_list)):
            if self.viewMode != 'Original' and self.viewMode != 'HSV':
                crop_list[i] = cv2.cvtColor(crop_list[i], cv2.COLOR_HSV2RGB)
                mask = self.getColorMask(crop_list[i])
                crop_list[i] = cv2.bitwise_and(crop_list[i], crop_list[i], mask=mask)

            # Draw Left Foot Boxes
            self.Tracker.draw_boxes(right_foot_box_list[i], (0, 255, 0), crop_list[i])

            # Draw Left Foot Center Points
            self.Tracker.draw_center_points(right_foot_center_points[i], (0, 255, 0), crop_list[i])

        # Draw Mouse Boxes
        self.Tracker.draw_boxes(mouse_box_list, (255, 0, 0), img)

        # Draw Mouse Center Points
        self.Tracker.draw_center_points(mouse_center_points, (255, 0, 0), img)

        # Insert cropped images
        self.Tracker.insert_images(mouse_box_list, crop_list, img)

        self.displayLabel.display_image(img, False, self.zoom)

    # Inline Member Method: buttonAction_draw_LF_roi
    # Method to allow the user to define the ROI for each left foot
    # Precondition: Left foot ROIs undefined
    # Postcondition:
    #       -Left foot ROIs defined
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def buttonAction_draw_LF_roi(self):
        # Disable Buttons
        self.DrawCage_pushButton.setEnabled(False)
        self.Detect_Mice_pushButton.setEnabled(False)
        self.Detect_LF_pushButton.setEnabled(False)
        self.Detect_RF_pushButton.setEnabled(False)
        self.Draw_LF_Roi_pushButton.setEnabled(False)
        self.Draw_RF_Roi_pushButton.setEnabled(False)
        self.Execute_pushButton.setEnabled(False)

        self.DrawCage_pushButton.setDisabled(True)
        self.Detect_Mice_pushButton.setDisabled(True)
        self.Detect_LF_pushButton.setDisabled(True)
        self.Detect_RF_pushButton.setDisabled(True)
        self.Draw_LF_Roi_pushButton.setDisabled(True)
        self.Draw_RF_Roi_pushButton.setDisabled(True)
        self.Execute_pushButton.setDisabled(True)

        self.dialog.infoDialog("Drag a box around each left foot")

        # Disable View Mode Selector
        self.View_Mode_comboBox.setEnabled(False)
        self.View_Mode_comboBox.setDisabled(True)

        img = self.parent_img.copy()

        # Noise Reduction
        if self.Tracker.noiseReduction_on is True:
            img = cv2.fastNlMeansDenoisingColored(img, h=self.Tracker.deNoise_val)

        img = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)
        box_list, center_point_list = self.Tracker.detect_mice(img, int(self.mouse_count))


        # Crop
        crop_list = self.Tracker.crop_images(img, box_list)

        # When scrollarea widget is reassigned to roiLabel object, the displayLabel object is destroyed
        # All valuable information from displayLabel must be backed up
        self.cage_vertices = self.displayLabel.cage_vertices
        self.cage_wall_vertices = self.displayLabel.cage_wall_vertices

        # Initialize roiLabel
        self.roiLabel = RoiLabel(self.mouse_count, crop_list, self.Tracker, self.zoom, QtInstance, 'left')
        self.roiLabel.setGeometry(QtCore.QRect(0, 0, 831, 821))

        self.roiLabel.setText("")
        self.roiLabel.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        self.roiLabel.setObjectName("roiLabel")
        self.roiLabel.setMouseTracking(True)
        self.Display_scrollArea.setWidget(self.roiLabel)  # self.displayLabel is destroyed in c++ space

    # Inline Member Method: buttonAction_draw_RF_roi
    # Method to allow the user to define the ROI for each right foot
    # Precondition: Right foot ROIs undefined
    # Postcondition:
    #       -Right foot ROIs defined
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def buttonAction_draw_RF_roi(self):
        # Disable Buttons
        self.DrawCage_pushButton.setEnabled(False)
        self.Detect_Mice_pushButton.setEnabled(False)
        self.Detect_LF_pushButton.setEnabled(False)
        self.Detect_RF_pushButton.setEnabled(False)
        self.Draw_LF_Roi_pushButton.setEnabled(False)
        self.Draw_RF_Roi_pushButton.setEnabled(False)
        self.Execute_pushButton.setEnabled(False)

        self.DrawCage_pushButton.setDisabled(True)
        self.Detect_Mice_pushButton.setDisabled(True)
        self.Detect_LF_pushButton.setDisabled(True)
        self.Detect_RF_pushButton.setDisabled(True)
        self.Draw_LF_Roi_pushButton.setDisabled(True)
        self.Draw_RF_Roi_pushButton.setDisabled(True)
        self.Execute_pushButton.setDisabled(True)

        self.dialog.infoDialog("Drag a box around each right foot")

        # Disable View Mode Selector
        self.View_Mode_comboBox.setEnabled(False)
        self.View_Mode_comboBox.setDisabled(True)

        img = self.parent_img.copy()

        # Noise Reduction
        if self.Tracker.noiseReduction_on is True:
            img = cv2.fastNlMeansDenoisingColored(img, h=self.Tracker.deNoise_val)

        img = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)
        box_list, center_point_list = self.Tracker.detect_mice(img, int(self.mouse_count))


        # Crop
        crop_list = self.Tracker.crop_images(img, box_list)

        # When scrollarea widget is reassigned to roiLabel object, the displayLabel object is destroyed
        # All valuable information from displayLabel must be backed up
        self.cage_vertices = self.displayLabel.cage_vertices
        self.cage_wall_vertices = self.displayLabel.cage_wall_vertices

        # Initialize roiLabel
        self.roiLabel = RoiLabel(self.mouse_count, crop_list, self.Tracker, self.zoom, QtInstance, 'right')
        self.roiLabel.setGeometry(QtCore.QRect(0, 0, 831, 821))
        self.roiLabel.setText("")
        self.roiLabel.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        self.roiLabel.setObjectName("roiLabel")
        self.roiLabel.setMouseTracking(True)
        self.Display_scrollArea.setWidget(self.roiLabel)  # self.displayLabel is destroyed in c++ space

    # Inline Member Method: buttonAction_execute
    # Method to begin tracking execution loop
    # Precondition: Tracking loop not started
    # Postcondition:
    #       -Timer defined
    #       -Timer Started
    #       -Timer connected to executionLoop()
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def buttonAction_execute(self):
        self.timer = QTimer()
        self.timer.timeout.connect(self.executionLoop)
        self.timer.setInterval(100)
        self.timer.start()

    # Inline Member Method: buttonAction_stop
    # Method to halt execution loop
    # Precondition: Execution timer running
    # Postcondition: Execution timer stopped
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def buttonAction_stop(self):
        self.timer.stop()
        self.timer.timeout.connect(self.buttonAction_stop)

    # Inline Member Method: buttonAction_exit
    # Method to exit the application
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def buttonAction_exit(self):
        MTrack_Qt_instance.destroy()
        sys.exit()

    # Inline Member Method: checkboxAction_collisionDetect
    # Method to activate collision detection when checkbox is checked
    # Precondition: Collision detection state unchanged
    # Postcondition: Collision detection state changed
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def checkboxAction_collisionDetect(self):
        if self.viewMode == 'Body Color Mask':
            self.Tracker.body_collision_detect = self.Collision_checkBox.isChecked()

        elif self.viewMode == 'Left Foot Color Mask':
            self.Tracker.left_foot_dilation = self.Collision_checkBox.isChecked()

        elif self.viewMode == 'Right Foot Color Mask':
            self.Tracker.right_foot_dilation = self.Collision_checkBox.isChecked()

        self.displayImage(self.parent_img, False)

    # Inline Member Method: checkboxAction_NoiseReduction
    # Method to activate noise reduction when checkbox is checked
    # Precondition: Noise reduction state unchanged
    # Postcondition: Noise reduction state changed
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def checkboxAction_NoiseReduction(self):
        self.Tracker.noiseReduction_on = self.NoiseReduction_checkBox.isChecked()
        self.displayImage(self.displayLabel.current_img, False)

    # Inline Member Method: selectorUpdate_mouseNum
    # Method to update the mouse count when the mouse number selector is changed
    # Precondition: Mouse count unchanged
    # Postcondition: Mouse count updated
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def selectorUpdate_mouseNum(self):
        self.mouse_count = str(self.mouse_num_selector.currentText())

    # Inline Member Method: selectorUpdate_viewMode
    # Method to update the view mode when the view mode selector is changed
    # Precondition: View mode unchanged
    # Postcondition:
    #       -View mode updated
    #       -Image redisplayed in new view mode
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def selectorUpdate_viewMode(self):
        if self.View_Mode_comboBox.currentText() == 'Original':
            self.disableControls()
            self.viewMode = 'Original'
            try:
                self.displayImage(self.parent_img, False)
            except:
                pass
        elif self.View_Mode_comboBox.currentText() == 'HSV':
            self.disableControls()
            self.viewMode = 'HSV'
            self.displayImage(self.parent_img, False)

        elif self.View_Mode_comboBox.currentText() == 'Body Color Mask':
            self.viewMode = 'Body Color Mask'
            self.enableControls()
            self.setControlValues()
            self.updateSelectorImage()
            self.displayImage(self.parent_img, False)

        elif self.View_Mode_comboBox.currentText() == 'Left Foot Color Mask':
            self.viewMode = 'Left Foot Color Mask'
            self.enableControls()
            self.setControlValues()
            self.updateSelectorImage()
            self.displayImage(self.parent_img, False)

        elif self.View_Mode_comboBox.currentText() == 'Right Foot Color Mask':
            self.viewMode = 'Right Foot Color Mask'
            self.enableControls()
            self.setControlValues()
            self.updateSelectorImage()
            self.displayImage(self.parent_img, False)

    # Inline Member Method: selectorUpdate_Zoom
    # Method to update zoom when changed
    # Precondition: Zoom unchanged
    # Postcondition:
    #       -Zoom updated
    #       -Image redisplayed zoomed
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def sliderUpdate_Zoom(self):
        self.zoom = self.Zoom_ScrollBar.value() / 10
        try:
            if self.Display_scrollArea.widget() == self.displayLabel:
                self.displayLabel.zoom = self.zoom  # Update Zoom
                self.displayImage(self.displayLabel.current_img, False)  # Redisplay Image
            else:
                self.roiLabel.zoom = self.zoom  # Update Zoom
                self.roiLabel.display_image(self.roiLabel.crop_list[self.roiLabel.roi_count],
                                            self.zoom)  # Redisplay Image
        except:
            pass

    # Inline Member Method: selectorUpdate_LHue
    # Method to update the LHue when changed
    # Precondition: LHue unchanged
    # Postcondition:
    #       -LHue updated
    #       -Image redisplayed with changes
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def sliderUpdate_LHue(self):
        if self.viewMode == 'Body Color Mask':
            self.Tracker.body_color_lower_hue = self.L_Hue_ScrollBar.value()

        elif self.viewMode == 'Left Foot Color Mask':
            self.Tracker.left_foot_color_lower_hue = self.L_Hue_ScrollBar.value()

        elif self.viewMode == 'Right Foot Color Mask':
            self.Tracker.right_foot_color_lower_hue = self.L_Hue_ScrollBar.value()

        self.updateSelectorImage()
        self.displayImage(self.parent_img, False)

    # Inline Member Method: selectorUpdate_LSat
    # Method to update the LSat when changed
    # Precondition: LSat unchanged
    # Postcondition:
    #       -LSat updated
    #       -Image redisplayed with changes
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def sliderUpdate_LSat(self):
        if self.viewMode == 'Body Color Mask':
            self.Tracker.body_color_lower_sat = self.L_Sat_ScrollBar.value()

        elif self.viewMode == 'Left Foot Color Mask':
            self.Tracker.left_foot_color_lower_sat = self.L_Sat_ScrollBar.value()

        elif self.viewMode == 'Right Foot Color Mask':
            self.Tracker.right_foot_color_lower_sat = self.L_Sat_ScrollBar.value()

        self.updateSelectorImage()
        self.displayImage(self.parent_img, False)

    # Inline Member Method: selectorUpdate_LVal
    # Method to update the LVal when changed
    # Precondition: LVal unchanged
    # Postcondition:
    #       -LVal updated
    #       -Image redisplayed with changes
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def sliderUpdate_LVal(self):
        if self.viewMode == 'Body Color Mask':
            self.Tracker.body_color_lower_val = self.L_Val_ScrollBar.value()

        elif self.viewMode == 'Left Foot Color Mask':
            self.Tracker.left_foot_color_lower_val = self.L_Val_ScrollBar.value()

        elif self.viewMode == 'Right Foot Color Mask':
            self.Tracker.right_foot_color_lower_val = self.L_Val_ScrollBar.value()

        self.updateSelectorImage()
        self.displayImage(self.parent_img, False)

    # Inline Member Method: selectorUpdate_UHue
    # Method to update the UHue when changed
    # Precondition: UHue unchanged
    # Postcondition:
    #       -UHue updated
    #       -Image redisplayed with changes
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def sliderUpdate_UHue(self):
        if self.viewMode == 'Body Color Mask':
            self.Tracker.body_color_upper_hue = self.U_Hue_ScrollBar.value()

        elif self.viewMode == 'Left Foot Color Mask':
            self.Tracker.left_foot_color_upper_hue = self.U_Hue_ScrollBar.value()

        elif self.viewMode == 'Right Foot Color Mask':
            self.Tracker.right_foot_color_upper_hue = self.U_Hue_ScrollBar.value()

        self.updateSelectorImage()
        self.displayImage(self.parent_img, False)

    # Inline Member Method: selectorUpdate_USat
    # Method to update the USat when changed
    # Precondition: USat unchanged
    # Postcondition:
    #       -USat updated
    #       -Image redisplayed with changes
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def sliderUpdate_USat(self):
        if self.viewMode == 'Body Color Mask':
            self.Tracker.body_color_upper_sat = self.U_Sat_ScrollBar.value()

        elif self.viewMode == 'Left Foot Color Mask':
            self.Tracker.left_foot_color_upper_sat = self.U_Sat_ScrollBar.value()

        elif self.viewMode == 'Right Foot Color Mask':
            self.Tracker.right_foot_color_upper_sat = self.U_Sat_ScrollBar.value()

        self.updateSelectorImage()
        self.displayImage(self.parent_img, False)

    # Inline Member Method: selectorUpdate_UVal
    # Method to update the UVal when changed
    # Precondition: UVal unchanged
    # Postcondition:
    #       -UVal updated
    #       -Image redisplayed with changes
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def sliderUpdate_UVal(self):
        if self.viewMode == 'Body Color Mask':
            self.Tracker.body_color_upper_val = self.U_Val_ScrollBar.value()

        elif self.viewMode == 'Left Foot Color Mask':
            self.Tracker.left_foot_color_upper_val = self.U_Val_ScrollBar.value()

        elif self.viewMode == 'Right Foot Color Mask':
            self.Tracker.right_foot_color_upper_val = self.U_Val_ScrollBar.value()

        self.updateSelectorImage()
        self.displayImage(self.parent_img, False)

    # Inline Member Method: selectorUpdate_Dilation
    # Method to update the Dilation when changed
    # Precondition: Dilation unchanged
    # Postcondition:
    #       -Dilation updated
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def sliderUpdate_Dilation(self):
        if self.viewMode == 'Body Color Mask':
            self.Tracker.body_dilation = self.Dilation_ScrollBar.value()

        elif self.viewMode == 'Left Foot Color Mask':
            self.Tracker.left_foot_dilation = self.Dilation_ScrollBar.value()

        elif self.viewMode == 'Right Foot Color Mask':
            self.Tracker.right_foot_dilation = self.Dilation_ScrollBar.value()

        self.displayImage(self.parent_img, False)

    # Inline Member Method: selectorUpdate_boxSize
    # Method to update the boxSize when changed
    # Precondition: boxSize unchanged
    # Postcondition:
    #       -boxSize updated
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def sliderUpdate_boxSize(self):
        if self.viewMode == 'Body Color Mask':
            self.Tracker.body_minBoxSize = self.Box_Size_ScrollBar.value()

        elif self.viewMode == 'Left Foot Color Mask':
            self.Tracker.left_foot_minBoxSize = self.Box_Size_ScrollBar.value()

        elif self.viewMode == 'Right Foot Color Mask':
            self.Tracker.right_foot_minBoxSize = self.Box_Size_ScrollBar.value()

        self.displayImage(self.parent_img, False)

    # Inline Member Method: selectorUpdate_deNoiseVal
    # Method to update the deNoiseVal when changed
    # Precondition: deNoise_val unchanged
    # Postcondition:
    #       -deNoise_val updated
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def sliderUpdate_deNoiseVal(self):
        self.Tracker.deNoise_val = self.deNoise_Val_ScrollBar.value()
        self.displayImage(self.displayLabel.current_img, False)

    # Inline Member Method: disableControls
    # Method to disable image manipulation and tracking controls
    # Precondition: Controls enabled
    # Postcondition: Controls disabled
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def disableControls(self):
        # Dis-Enable
        self.L_Hue_ScrollBar.setEnabled(False)
        self.L_Sat_ScrollBar.setEnabled(False)
        self.L_Val_ScrollBar.setEnabled(False)
        self.U_Hue_ScrollBar.setEnabled(False)
        self.U_Sat_ScrollBar.setEnabled(False)
        self.U_Val_ScrollBar.setEnabled(False)
        self.Dilation_ScrollBar.setEnabled(False)
        self.Box_Size_ScrollBar.setEnabled(False)
        self.Collision_checkBox.setEnabled(False)
        self.L_Hue_spinBox.setEnabled(False)
        self.L_Sat_spinBox.setEnabled(False)
        self.L_Val_spinBox.setEnabled(False)
        self.U_Hue_spinBox.setEnabled(False)
        self.U_Sat_spinBox.setEnabled(False)
        self.U_Val_spinBox.setEnabled(False)
        self.Dilation_spinBox.setEnabled(False)
        self.Box_Size_spinBox.setEnabled(False)

        # Disable
        self.L_Hue_ScrollBar.setDisabled(True)
        self.L_Sat_ScrollBar.setDisabled(True)
        self.L_Val_ScrollBar.setDisabled(True)
        self.U_Hue_ScrollBar.setDisabled(True)
        self.U_Sat_ScrollBar.setDisabled(True)
        self.U_Val_ScrollBar.setDisabled(True)
        self.Dilation_ScrollBar.setDisabled(True)
        self.Box_Size_ScrollBar.setDisabled(True)
        self.Collision_checkBox.setDisabled(True)
        self.L_Hue_spinBox.setDisabled(True)
        self.L_Sat_spinBox.setDisabled(True)
        self.L_Val_spinBox.setDisabled(True)
        self.U_Hue_spinBox.setDisabled(True)
        self.U_Sat_spinBox.setDisabled(True)
        self.U_Val_spinBox.setDisabled(True)
        self.Dilation_spinBox.setDisabled(True)
        self.Box_Size_spinBox.setDisabled(True)

    # Inline Member Method: enableControls
    # Method to enable image manipulation and tracking controls
    # Precondition: Controls disabled
    # Postcondition: Controls enabled
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def enableControls(self):
        # Re-Enable
        self.L_Hue_ScrollBar.setEnabled(True)
        self.L_Sat_ScrollBar.setEnabled(True)
        self.L_Val_ScrollBar.setEnabled(True)
        self.U_Hue_ScrollBar.setEnabled(True)
        self.U_Sat_ScrollBar.setEnabled(True)
        self.U_Val_ScrollBar.setEnabled(True)
        self.Dilation_ScrollBar.setEnabled(True)
        self.Box_Size_ScrollBar.setEnabled(True)
        self.L_Hue_spinBox.setEnabled(True)
        self.L_Sat_spinBox.setEnabled(True)
        self.L_Val_spinBox.setEnabled(True)
        self.U_Hue_spinBox.setEnabled(True)
        self.U_Sat_spinBox.setEnabled(True)
        self.U_Val_spinBox.setEnabled(True)
        self.Dilation_spinBox.setEnabled(True)
        self.Box_Size_spinBox.setEnabled(True)

        # Un-Disable
        self.L_Hue_ScrollBar.setDisabled(False)
        self.L_Sat_ScrollBar.setDisabled(False)
        self.L_Val_ScrollBar.setDisabled(False)
        self.U_Hue_ScrollBar.setDisabled(False)
        self.U_Sat_ScrollBar.setDisabled(False)
        self.U_Val_ScrollBar.setDisabled(False)
        self.Dilation_ScrollBar.setDisabled(False)
        self.Box_Size_ScrollBar.setDisabled(False)
        self.L_Hue_spinBox.setDisabled(False)
        self.L_Sat_spinBox.setDisabled(False)
        self.L_Val_spinBox.setDisabled(False)
        self.U_Hue_spinBox.setDisabled(False)
        self.U_Sat_spinBox.setDisabled(False)
        self.U_Val_spinBox.setDisabled(False)
        self.Dilation_spinBox.setDisabled(False)
        self.Box_Size_spinBox.setDisabled(False)

        if self.viewMode == 'Body Color Mask':
            self.Collision_checkBox.setEnabled(True)
            self.Collision_checkBox.setDisabled(False)
        else:
            self.Collision_checkBox.setEnabled(False)
            self.Collision_checkBox.setDisabled(True)

    # Inline Member Method: updateSelectorImage
    # Method to update the selector image color
    # Precondition: Selector image unchanged
    # Postcondition: Selector Image updated
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def updateSelectorImage(self):
        self.Tracker.generate_selector_images()
        if self.viewMode == 'Body Color Mask':
            self.colorLabel.display_image(self.Tracker.body_color_image)

        elif self.viewMode == 'Left Foot Color Mask':
            self.colorLabel.display_image(self.Tracker.left_foot_color_image)

        elif self.viewMode == 'Right Foot Color Mask':
            self.colorLabel.display_image(self.Tracker.right_foot_color_image)

    # Inline Member Method: setControlValues
    # Method to set slider positions based on view mode
    # Precondition: Slider positions/values unchanged
    # Postcondition: Slider positions updated
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def setControlValues(self):
        if self.viewMode == 'Body Color Mask':
            self.L_Hue_ScrollBar.setValue(self.Tracker.body_color_lower_hue)
            self.L_Sat_ScrollBar.setValue(self.Tracker.body_color_lower_sat)
            self.L_Val_ScrollBar.setValue(self.Tracker.body_color_lower_val)
            self.U_Hue_ScrollBar.setValue(self.Tracker.body_color_upper_hue)
            self.U_Sat_ScrollBar.setValue(self.Tracker.body_color_upper_sat)
            self.U_Val_ScrollBar.setValue(self.Tracker.body_color_upper_val)
            self.Dilation_ScrollBar.setValue(self.Tracker.body_dilation)
            self.Box_Size_ScrollBar.setValue(self.Tracker.body_minBoxSize)
            self.Collision_checkBox.setChecked(self.Tracker.body_collision_detect)
        elif self.viewMode == 'Left Foot Color Mask':
            self.L_Hue_ScrollBar.setValue(self.Tracker.left_foot_color_lower_hue)
            self.L_Sat_ScrollBar.setValue(self.Tracker.left_foot_color_lower_sat)
            self.L_Val_ScrollBar.setValue(self.Tracker.left_foot_color_lower_val)
            self.U_Hue_ScrollBar.setValue(self.Tracker.left_foot_color_upper_hue)
            self.U_Sat_ScrollBar.setValue(self.Tracker.left_foot_color_upper_sat)
            self.U_Val_ScrollBar.setValue(self.Tracker.left_foot_color_upper_val)
            self.Dilation_ScrollBar.setValue(self.Tracker.left_foot_dilation)
            self.Box_Size_ScrollBar.setValue(self.Tracker.left_foot_minBoxSize)
            self.Collision_checkBox.setChecked(self.Tracker.left_foot_collision_detect)
        elif self.viewMode == 'Right Foot Color Mask':
            self.L_Hue_ScrollBar.setValue(self.Tracker.right_foot_color_lower_hue)
            self.L_Sat_ScrollBar.setValue(self.Tracker.right_foot_color_lower_sat)
            self.L_Val_ScrollBar.setValue(self.Tracker.right_foot_color_lower_val)
            self.U_Hue_ScrollBar.setValue(self.Tracker.right_foot_color_upper_hue)
            self.U_Sat_ScrollBar.setValue(self.Tracker.right_foot_color_upper_sat)
            self.U_Val_ScrollBar.setValue(self.Tracker.right_foot_color_upper_val)
            self.Dilation_ScrollBar.setValue(self.Tracker.right_foot_dilation)
            self.Box_Size_ScrollBar.setValue(self.Tracker.right_foot_minBoxSize)
            self.Collision_checkBox.setChecked(self.Tracker.right_foot_collision_detect)

    # Inline Member Method: getColorMask
    # Method to generate color mask from current settings
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def getColorMask(self, img):
        if self.viewMode == 'Body Color Mask':
            Lhue = self.Tracker.body_color_lower_hue
            Lsat = self.Tracker.body_color_lower_sat
            Lval = self.Tracker.body_color_lower_val
            Uhue = self.Tracker.body_color_upper_hue
            Usat = self.Tracker.body_color_upper_sat
            Uval = self.Tracker.body_color_upper_val
            dilation = self.Tracker.body_dilation
        elif self.viewMode == 'Left Foot Color Mask':
            Lhue = self.Tracker.left_foot_color_lower_hue
            Lsat = self.Tracker.left_foot_color_lower_sat
            Lval = self.Tracker.left_foot_color_lower_val
            Uhue = self.Tracker.left_foot_color_upper_hue
            Usat = self.Tracker.left_foot_color_upper_sat
            Uval = self.Tracker.left_foot_color_upper_val
            dilation = self.Tracker.left_foot_dilation
        elif self.viewMode == 'Right Foot Color Mask':
            Lhue = self.Tracker.right_foot_color_lower_hue
            Lsat = self.Tracker.right_foot_color_lower_sat
            Lval = self.Tracker.right_foot_color_lower_val
            Uhue = self.Tracker.right_foot_color_upper_hue
            Usat = self.Tracker.right_foot_color_upper_sat
            Uval = self.Tracker.right_foot_color_upper_val
            dilation = self.Tracker.right_foot_dilation
        img = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)
        mask = self.Tracker.map_binary_color(img, Lhue, Lsat, Lval, Uhue, Usat, Uval, dilation)
        return mask

    def resizeEvent(self, event):
                scaledSize = self.originalPixmap.size()
                scaledSize.scale(self.screenshotLabel.size(), QtCore.Qt.KeepAspectRatio)
                if not self.screenshotLabel.pixmap() or scaledSize != self.screenshotLabel.pixmap().size():
                    self.updateScreenshotLabel()
    # Inline Member Method: displayImage
    # Method to display image
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def displayImage(self, img, crop):
        if self.viewMode == 'Original':
            self.displayLabel.display_image(img, crop, self.zoom)

        elif self.viewMode == 'HSV':
            img = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)
            self.displayLabel.display_image(img, crop, self.zoom)

        elif self.viewMode == 'Body Color Mask':
            mask = self.getColorMask(img)
            mask = cv2.bitwise_and(img, img, mask=mask)
            self.displayLabel.display_image(mask, crop, self.zoom)

        elif self.viewMode == 'Left Foot Color Mask':
            mask = self.getColorMask(img)
            mask = cv2.bitwise_and(img, img, mask=mask)
            self.displayLabel.display_image(mask, crop, self.zoom)

        elif self.viewMode == 'Right Foot Color Mask':
            mask = self.getColorMask(img)
            mask = cv2.bitwise_and(img, img, mask=mask)
            self.displayLabel.display_image(mask, crop, self.zoom)

    # Inline Member Method: executionLoop
    # Method to read next frame from file and perform tracking on that frame
    # Precondition: Tracking not performed
    # Postcondition:
    #       - Frame read from file
    #       - Tracking performed on frame
    #       - Tracking data outputed to file
    # Created by Sheldon Reeves on 6/24/15.
    # Language: Python 2.7
    def executionLoop(self):

        self.Stop_pushButton.setEnabled(True)
        self.Stop_pushButton.setDisabled(False)

        self.timer.stop()


        # Initialize Lists
        left_foot_center_points = [[0 for x in range(100)] for x in range(100)]
        right_foot_center_points = [[0 for x in range(100)] for x in range(100)]
        crop_list = []
        angle_list = []

        # Capture Next Frame
        self.frame_count += 1
        f, orig_img = self.Tracker.capture.read()

        # Frame could not be read
        if f == False:
            return

        # Perform Rotation and crop
        orig_img = self.displayLabel.crop_image(orig_img)
        self.parent_img = orig_img.copy()
        orig_img = cv2.cvtColor(orig_img, cv2.COLOR_RGB2HSV)

        # Detect Mouse bodies
        mouse_box_list, mouse_center_points = self.Tracker.process_image_color(orig_img.copy(),
                                                                               self.Tracker.body_color_lower_hue,
                                                                               self.Tracker.body_color_lower_sat,
                                                                               self.Tracker.body_color_lower_val,
                                                                               self.Tracker.body_color_upper_hue,
                                                                               self.Tracker.body_color_upper_sat,
                                                                               self.Tracker.body_color_upper_val,
                                                                               self.Tracker.body_collision_detect,
                                                                               self.Tracker.body_dilation,
                                                                               self.Tracker.body_minBoxSize,
                                                                               self.Tracker.box_scale)

        # If too many mice are detected
        if len(mouse_box_list) > int(self.mouse_count):
            self.dialog.infoDialog("Too many mice detected! Reconfigure Parameters.")
            return

        # Sort mouse lists
        if int(self.mouse_count) > 1:
            mouse_box_list, mouse_center_points,line_points, self.left_foot_roi_hist_buffer, self.left_foot_roi_window_buffer, self.right_foot_roi_hist_buffer, self.right_foot_roi_window_buffer = self.Tracker.sort_mouse_list(
                mouse_box_list, mouse_center_points,
                self.left_foot_roi_hist_buffer,
                self.left_foot_roi_window_buffer,
                self.right_foot_roi_hist_buffer,
                self.right_foot_roi_window_buffer)

        # Crop mice from image
        if mouse_box_list:
            crop_list = self.Tracker.crop_images(orig_img, mouse_box_list)

        if crop_list:
            # Perform Noise Reduction on cropped images
            if self.Tracker.noiseReduction_on is True:
                for i in range(0, len(crop_list)):
                    crop_list[i] = cv2.fastNlMeansDenoisingColored(crop_list[i], h=self.Tracker.deNoise_val)

            # Perform roi tracking for each isolated image for left foot
            for i in range(0, len(crop_list)):
                left_foot_center_points[i], left_track_window = self.Tracker.process_image_roi(
                    crop_list[i],
                    self.left_foot_roi_hist_buffer[i],
                    self.left_foot_roi_window_buffer[i],
                    self.Tracker.left_foot_color_lower_hue,
                    self.Tracker.left_foot_color_lower_sat,
                    self.Tracker.left_foot_color_lower_val,
                    self.Tracker.left_foot_color_upper_hue,
                    self.Tracker.left_foot_color_upper_sat,
                    self.Tracker.left_foot_color_upper_val,
                    self.Tracker.left_foot_dilation)

                # Perform roi tracking for each isolated image for right foot
                right_foot_center_points[i], right_track_window = self.Tracker.process_image_roi(
                    crop_list[i],
                    self.right_foot_roi_hist_buffer[i],
                    self.right_foot_roi_window_buffer[i],
                    self.Tracker.right_foot_color_lower_hue,
                    self.Tracker.right_foot_color_lower_sat,
                    self.Tracker.right_foot_color_lower_val,
                    self.Tracker.right_foot_color_upper_hue,
                    self.Tracker.right_foot_color_upper_sat,
                    self.Tracker.right_foot_color_upper_val,
                    self.Tracker.right_foot_dilation)

                self.left_foot_roi_window_buffer[i] = left_track_window  # Update track window
                self.right_foot_roi_window_buffer[i] = right_track_window  # Update track window

            orig_img = cv2.cvtColor(orig_img, cv2.COLOR_HSV2RGB)  # Convert color back

            # Draw Mouse Boxes
            self.Tracker.draw_boxes(mouse_box_list, (255, 0, 0), orig_img)

            # Draw Mouse Center Points
            for i in mouse_center_points:
                if len(i) != 0:
                    cv2.circle(orig_img, i, 1, (255, 0, 0), 3)

            for i in range(0, len(crop_list)):

                crop_list[i] = cv2.cvtColor(crop_list[i], cv2.COLOR_HSV2RGB)

                # Draw Left Foot Center Points
                for j in left_foot_center_points[i]:
                    cv2.circle(crop_list[i], j, 3, (0, 255, 0), 3)

                # Draw Right Foot Center Points
                for j in right_foot_center_points[i]:
                    cv2.circle(crop_list[i], j, 3, (0, 0, 255), 3)


            # Change center point coords to be relative to global image
            left_foot_center_points = self.Tracker.globalize_center_points(mouse_box_list, left_foot_center_points)
            right_foot_center_points = self.Tracker.globalize_center_points(mouse_box_list,
                                                                            right_foot_center_points)

            # Insert modified images
            self.Tracker.insert_images(mouse_box_list, crop_list, orig_img)

            for i in range(0,len(crop_list)):

                # Calculate and Draw angle lines
                avgx = int((left_foot_center_points[i][0][0] + right_foot_center_points[i][0][0])/2)
                avgy = int((left_foot_center_points[i][0][1] + right_foot_center_points[i][0][1])/2)
                avgpoint = (avgx,avgy)

                # Remove comment for body angle arrow
                cv2.arrowedLine(orig_img,mouse_center_points[i],avgpoint,(255,255,255),1)

                dx = avgpoint[0] - mouse_center_points[i][0]
                dy = avgpoint[1] - mouse_center_points[i][1]
                rads = math.atan2(dy,dx)
                rads %= 2*math.pi
                degs = math.degrees(rads)
                angle_list.append(degs)

            # Generate Output strings
            for i in range(0, len(mouse_box_list)):
                s = (str(self.frame_count) + " " + str(i) + " " +
                     str(left_foot_center_points[i][0][0]) + " " + str(left_foot_center_points[i][0][1]) + " " +
                     str(right_foot_center_points[i][0][0]) + " " + str(right_foot_center_points[i][0][1]) + " " + str(angle_list[i]) + '\n')

                try:
                    self.saveFile.write(s)
                except:
                    self.timer.stop()
                    self.dialog.infoDialog("Please select a save directory")
                    return
            # End Crop_list If

        # Draw wall Lines
        for i in range(0, len(self.cage_wall_vertices), 2):
            cv2.line(orig_img, tuple(self.cage_wall_vertices[i]), tuple(self.cage_wall_vertices[i + 1]), (0, 255, 255),
                     1, 8)





        self.displayImage(orig_img, False)
        self.timer.start()



if __name__ == "__main__":

    print cv2.__version__

    app = QtGui.QApplication(sys.argv)
    MTrack_Qt_instance = QtGui.QMainWindow()
    #MTrack_Qt_instance.setGeometry(3,30,800,800)

    # Background Color
    pal = QtGui.QPalette(MTrack_Qt_instance.palette())
    pal.setColor(MTrack_Qt_instance.backgroundRole(), QtGui.QColor(171, 171, 171))
    MTrack_Qt_instance.setPalette(pal)

    QtInstance = MTrack_Qt(MTrack_Qt_instance)



    MTrack_Qt_instance.show()



    sys.exit(app.exec_())
